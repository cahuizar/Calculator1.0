==27363== Memcheck, a memory error detector
==27363== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==27363== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==27363== Command: ./assignment3
==27363== Parent PID: 27335
==27363== 
disInstr(arm): unhandled instruction: 0xF1010200
                 cond=15(0xF) 27:20=16(0x10) 4:4=0 3:0=0(0x0)
==27363== valgrind: Unrecognised instruction at address 0x48426f4.
==27363==    at 0x48426F4: ??? (in /usr/lib/arm-linux-gnueabihf/libarmmem.so)
==27363== Your program just tried to execute an instruction that Valgrind
==27363== did not recognise.  There are two possible reasons for this.
==27363== 1. Your program has a bug and erroneously jumped to a non-code
==27363==    location.  If you are running Memcheck and you just saw a
==27363==    warning about a bad jump, it's probably your program's fault.
==27363== 2. The instruction is legitimate but Valgrind doesn't handle it,
==27363==    i.e. it's Valgrind's fault.  If you think this is the case or
==27363==    you are not sure, please let us know and we'll try to fix it.
==27363== Either way, Valgrind will now raise a SIGILL signal which will
==27363== probably kill your program.
==27363== 
==27363== Process terminating with default action of signal 4 (SIGILL)
==27363==  Illegal opcode at address 0x48426F4
==27363==    at 0x48426F4: ??? (in /usr/lib/arm-linux-gnueabihf/libarmmem.so)
==27363== 
==27363== HEAP SUMMARY:
==27363==     in use at exit: 0 bytes in 0 blocks
==27363==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==27363== 
==27363== All heap blocks were freed -- no leaks are possible
==27363== 
==27363== For counts of detected and suppressed errors, rerun with: -v
==27363== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
